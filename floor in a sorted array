#include<iostream>
#include<vector>
#include<string>
#include<cstring>
#include<cmath>
#include<algorithm>
#include<unordered_map>
#include<unordered_set>
#include<set>
#include<map>
#include<sstream>
#include<stack>
#include<queue>
#include<climits>
using namespace std;

#define floop(i,L,R) for (int i = L; i < R; i++)
#define feloop(i,L,R) for (int i = L; i <= R; i++)
#define ffloop(i,L,R) for (int i = L; i > R; i--)
#define ffeloop(i,L,R) for (int i = L; i >= R; i--)
#define forEach(i,t) for (auto i=t.begin(); i!=t.end(); i++)
#define ALL(c) (c).begin(),(c).end()
#define pb push_back
#define dekh(d) cout<<d<<endl
#define dekh2(d) cout<<d<<" "
#define dekh3(d) cout<<d
typedef unsigned long long ull;
typedef long long ll;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<ll> vll;
typedef long double ld;

int solve(vi& v, int n, int key ){
    int low = 0 ;
    int high = n - 1;
    while(high >= low){
        int  mid =  (low + high)/2;
        if(v[mid] == key) return mid;
        if((v[mid] <= key && mid != n- 1 && v[mid + 1] > key) || (mid == n -1 && v[mid] <= key)){
            return mid;
        }
        
        else if(v[mid] <= key){
            low = mid +  1;

        }
        else{
            high = mid- 1;
        }
    }
    return -1;
}

int main(){
   int t;
   cin>>t;
   while(t--){
       int n ;
       cin>>n;
       int key ;
       cin>>key;
       vi v(n);
       floop(i , 0, n) cin>>v[i];
       cout<<solve(v, n , key)<<endl;
   }
}
