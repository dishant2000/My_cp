//approach is that we are taking the last element and find the no of ways to get it by checking each positions steps
#include <bits/stdc++.h>
using namespace std;
int b[21];
int cs(int arr[], int n){
    // write your code here
    b[n] = 1;
    for(int i = n - 1; i >= 0; i--){
        int kha = arr[i];
        int s = 0;
        for(int j = 1; j <=  kha; j++){
            if(i + j <= n){
                s += b[i + j];
            }

        }
        b[i] = s;
    }
    
    return b[0];
}

int main(){
    memset(b,-1,sizeof(b));
    int n;
    cin>>n;
    int arr[n];
    for(int i = 0 ; i < n ;i++){
        cin>>arr[i];
    }
    cout<<cs(arr,n)<<endl;
    // for(int i = 0 ; i <= n ;i++){
    //     cout<<b[i]<<" ";
    // }
}


//bekar way to do it is to check the previous ways wheather it comes from that or not 

#include <bits/stdc++.h>
using namespace std;
int b[21];
int cs(int arr[], int n){
    // write your code here
    b[0] = 1;
    for(int i = 1 ;i <= n ; i++){
        int s = 0;
        for(int j = i - 1 ; j >= 0 ; j--){
            int kha = arr[j];
            if(kha + j - i >= 0){
                s += b[j];
            }
        }
        b[i] = s;
    }
    
    return b[n];
}

int main(){
    memset(b,-1,sizeof(b));
    int n;
    cin>>n;
    int arr[n];
    for(int i = 0 ; i < n ;i++){
        cin>>arr[i];
    }
    cout<<cs(arr,n)<<endl;
    // for(int i = 0 ; i <= n ;i++){
    //     cout<<b[i]<<" ";
    // }
}
