#include<iostream>
#include<vector>
#include<string>
#include<cstring>
#include<cmath>
#include<algorithm>
#include<unordered_map>
#include<unordered_set>
#include<set>
#include<map>
#include<sstream>
#include<stack>
#include<queue>
#include<climits>
using namespace std;

#define floop(i,L,R) for (int i = L; i < R; i++)
#define feloop(i,L,R) for (int i = L; i <= R; i++)
#define ffloop(i,L,R) for (int i = L; i > R; i--)
#define ffeloop(i,L,R) for (int i = L; i >= R; i--)
#define forEach(i,t) for (auto i=t.begin(); i!=t.end(); i++)
#define ALL(c) (c).begin(),(c).end()
#define pb push_back
#define dekh(d) cout<<d<<endl
#define dekh2(d) cout<<d<<" "
#define dekh3(d) cout<<d
typedef unsigned long long ull;
typedef long long ll;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<ll> vll;
typedef long double ld;
//int dp[10001][10001];
int solve(vi& v, int key){
   int high = v.size(), low = 0 ;
   int res;
   while(high  >= low ){
       int mid = high + (high - low)/2; // this is important for the integer overflow cases
       if(v[mid] == key){
           res = mid;
           break;
       }
       else if(key > v[mid]){
           low = mid + 1;
       }
       else{
           high = mid - 1;
       }
   }
   return res;
}

int main(){
    
    int n; 
    cin>>n;
    vi v(n);
    floop(i , 0 , n) cin>>v[i];
    int key;
    cin>>key;
    cout<<solve(v,key)<<endl;
    
    
  
}

