#include<iostream>
#include<vector>
#include<string>
#include<cstring>
#include<cmath>
#include<algorithm>
#include<unordered_map>
#include<unordered_set>
#include<set>
#include<map>
#include<sstream>
#include<stack>
#include<queue>
#include<climits>
using namespace std;

#define floop(i,L,R) for (int i = L; i < R; i++)
#define feloop(i,L,R) for (int i = L; i <= R; i++)
#define ffloop(i,L,R) for (int i = L; i > R; i--)
#define ffeloop(i,L,R) for (int i = L; i >= R; i--)
#define forEach(i,t) for (auto i=t.begin(); i!=t.end(); i++)
#define ALL(c) (c).begin(),(c).end()
#define pb push_back
#define dekh(d) cout<<d<<endl
#define dekh2(d) cout<<d<<" "
#define dekh3(d) cout<<d
typedef unsigned long long ull;
typedef long long ll;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<ll> vll;
typedef long double ld;
int dp[400][400];
int solve(vi& v,int n,int s ){
    if(s == 0) return 1;
    if(s < 0 || n == 0 ) return 0;
    if(dp[n][s] != -1) return dp[n][s];
    dp[n][s] =  solve(v,n,s - v[n-1]) + solve(v,n-1,s);
    return dp[n][s];
}
int main() {
    ios_base::sync_with_stdio(false);
    
    cin.tie(NULL);
    int t;
    cin >> t;
    while (t--) {
        memset(dp,-1,sizeof(dp));
        int n;
        cin>>n;
        vi v(n);
        floop(i,0,n) cin>>v[i];
        int target;
        cin>>target;
        int res = solve(v,n,target);

        floop(i,0,n+1){
            floop(j,0,target +1)
            {
                cout<<dp[i][j]<<" "; 
            }
            cout<<endl;
        }
        cout<<res<<endl;


    }

}
