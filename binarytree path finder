#include<iostream>
#include<vector>
#include<string>
#include<cstring>
#include<cmath>
#include<algorithm>
#include<unordered_map>
#include<unordered_set>
#include<set>
#include<map>
#include<sstream>
#include<stack>
#include<queue>
#include<climits>
using namespace std;

#define floop(i,L,R) for (int i = L; i < R; i++)
#define feloop(i,L,R) for (int i = L; i <= R; i++)
#define ffloop(i,L,R) for (int i = L; i > R; i--)
#define ffeloop(i,L,R) for (int i = L; i >= R; i--)
#define forEach(i,t) for (auto i=t.begin(); i!=t.end(); i++)
#define ALL(c) (c).begin(),(c).end()
#define pb push_back
#define dekh(d) cout<<d<<endl
#define dekh2(d) cout<<d<<" "
#define dekh3(d) cout<<d
typedef unsigned long long ull;
typedef long long ll;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<ll> vll;
typedef long double ld;
int flag = 0;

struct node{
    int data ;
    node* left;
    node* right;
    node(int d){
        data = d;
        left = NULL;
        right = NULL;
    }

};

void levelorder(struct node* temp){
    //struct node* temp = root;
    queue<struct node*> q;
    q.push(temp);
    while(!q.empty()){
        node* u = q.front();
        q.pop();
       
        cout<<u->data<<endl;
         //if(u->data == 10) u->data = 21;
        if(u->left != NULL){
            q.push(u->left);
        }
        if(u->right != NULL){
            q.push(u->right);
        }
    }
}

void inorder(node* root){
    while(root){
        inorder(root->left);
        cout<<root->data<<endl;
        inorder(root->right);
    }
}

void insert(node* root,int key){
    queue<struct node*>q;
    q.push(root);
    while(!q.empty()){
        struct node* u = q.front();
        q.pop();
        if(u->left == NULL){
            u->left = new node(key);
            break;
        }
        else if(u->left != NULL){
            q.push(u->left);
        }

        if(u->right == NULL){
            u->right = new node(key);
            break;
        }
        else if(u->right != NULL){
            q.push(u->right);
        }
    }
}

void pathfinder(node* root, int key, vector<node*>& v){
    if(flag == 1) return;
    if(root == NULL) return;
    if(root->data == key){
        v.push_back(root);
        flag = 1;
        return ;
    }
    else{
        v.push_back(root);
        pathfinder(root->left, key, v);
        pathfinder(root->right, key , v);
        if(flag == 0)
            v.pop_back();
    }
    
}
int main(){
    struct node* root = new node(10); 
    root->left = new node(11); 
    root->left->left = new node(7); 
    root->right = new node(9); 
    root->right->left = new node(15); 
    root->right->right = new node(8); 

    //root->levelorder();
   // levelorder(root);

    cout<<"traversal completede!!"<<endl;

    // insertion karag do 
    //  int key;
    //  cin>>key;

    // insert(root, key);
     
    // levelorder(root);
    flag = 0;
    vector<node*> v;
    pathfinder(root, 7, v);
    cout<<"path is here"<<endl;
    floop(i, 0 , v.size()){
        cout<<v[i]->data<<" ";
    }
    cout<<endl;
}

