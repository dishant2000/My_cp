#include<iostream>
#include<vector>
#include<string>
#include<cstring>
#include<cmath>
#include<algorithm>
#include<unordered_map>
#include<unordered_set>
#include<set>
#include<map>
#include<sstream>
#include<stack>
#include<queue>
using namespace std;

#define floop(i,L,R) for (int i = L; i < R; i++)
#define feloop(i,L,R) for (int i = L; i <= R; i++)
#define ffloop(i,L,R) for (int i = L; i > R; i--)
#define ffeloop(i,L,R) for (int i = L; i >= R; i--)
#define forEach(i,t) for (auto i=t.begin(); i!=t.end(); i++)
#define ALL(c) (c).begin(),(c).end()
#define pb push_back
#define dekh(d) cout<<d<<endl
#define dekh2(d) cout<<d<<" "
#define dekh3(d) cout<<d
typedef unsigned long long ull;
typedef long long ll;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<ll> vll;
typedef long double ld;
int  dp[1001][1001];
int solve(vi& V, vi& W, int n, int w){
    floop(i,0,n + 1){
        floop(j,0,w + 1){
            if(i == 0||j == 0){
                dp[i][j] = 0;
            }
        }
    }
    floop(i,1,n + 1){
        floop(j,1,w + 1){
            if(W[i -1] <= j){
                dp[i][j] = max(V[i -1] + dp[i][j - W[i -1]], dp[i -1][j]);
            }
            else{
                dp[i][j] = dp[i - 1][j];
            }
        }
    }
    
    return dp[n][w];
}
int main() {
    ios_base::sync_with_stdio(false);
    memset(dp,-1,sizeof(dp));
    cin.tie(NULL);
    int t;
    cin >> t;
    while (t--) {
        int n ,w;
        cin>>n>>w;
        vi val(n);
        vi wei(n);
        floop(i,0,n) cin>>val[i];
        floop(i,0,n) cin>>wei[i];
        int res = solve(val,wei,n,w);
        cout<<res<<endl;

    }

}
