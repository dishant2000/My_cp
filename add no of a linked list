/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    
    string extactor(ListNode* l){
        string res = "";
        ListNode* temp = l;
        while(temp != NULL){
            res += to_string(temp->val);
            temp = temp->next;
            
        }
        return res;
    }
    string addString(string s1, string s2){
        int n1 = s1.size();
        int n2 = s2.size();
        string res = "";
        if(n1 > n2){
            bool carry = false;
            for(int i = 0 ; i < n2; i++){
                
                int t1 = s1[i] - '0';
                int t2 = s2[i] - '0';
                int ts = t1 + t2;
                if(carry){
                    ts += 1;
                    carry = false;
                }
                string tss = to_string(ts);
                if(tss.size() == 2){
                    res += tss[1];
                    carry = true;
                }
                else{
                    res += tss[0];
                }
                
            }
            for(int i = n2; i < n1 - 1; i++){
                int t1 = s1[i] - '0';
                if(carry){
                    t1 += 1;
                    carry = false;
                }
                string tss = to_string(t1);
                if(tss.size() == 2){
                    res += tss[1];
                    carry = true;
                }
                else{
                    res += tss[0];
                }
                    
            }
            if(carry){
                int t = s1[n1 -1] - '0';
                t += 1;
                string ts = to_string(t);
                if(ts.size() == 2){
                    res += ts[1];
                    res += ts[0];
                }
                else{
                    res += ts[0];
                }
            }
            else{
                res += s1[n1 -1];
            }
            
        }
        else{
            bool carry = false;
            for(int i = 0 ; i < n1; i++){
                int t1 = s1[i] - '0';
                int t2 = s2[i] - '0';
                int ts = t1 + t2;
                if(carry){
                    ts += 1;
                    carry = false;
                }
                string tss = to_string(ts);
                if(tss.size() == 2){
                    res += tss[1];
                    carry = true;
                }
                else{
                    res += tss[0];
                }
                
            }
            for(int i = n1; i < n2 - 1; i++){
                int t1 = s2[i] - '0';
                if(carry){
                    t1 += 1;
                    carry = false;
                }
                string tss = to_string(t1);
                if(tss.size() == 2){
                    res += tss[1];
                    carry = true;
                }
                else{
                    res += tss[0];
                }
                    
            }
            if(n1 != n2){
            if(carry){
                int t = s2[n2 -1] - '0';
                t += 1;
                string ts = to_string(t);
                if(ts.size() == 2){
                    res += ts[1];
                    res += ts[0];
                }
                else{
                    res += ts[0];
                }
            }
            else{
                res += s2[n2 -1];
            }
            }
            else{
                if(carry){
                    res += '1';
                }
            }
        }
        reverse(res.begin(),res.end());
        return res;
    }
    ListNode* makeNode(string s){
        
        ListNode* temp  = NULL;
        ListNode* st = NULL;
        for(int i = 0 ; i < s.size(); i++){
            if(temp == NULL){
                temp = new ListNode(s[i] - '0');
            }
            else{
                temp = new ListNode(s[i] - '0', temp);
            }
        }
        return temp;
        
    }
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        string n1 = extactor(l1);
        string n2 = extactor(l2);
        
        string res = addString(n1,n2); 
        
        return makeNode(res);
    }
};
