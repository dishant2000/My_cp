#include<iostream>
#include<vector>
#include<string>
#include<cstring>
#include<cmath>
#include<algorithm>
#include<unordered_map>
#include<unordered_set>
#include<set>
#include<map>
#include<sstream>
#include<stack>
#include<queue>
#include<climits>
using namespace std;

#define floop(i,L,R) for (int i = L; i < R; i++)
#define feloop(i,L,R) for (int i = L; i <= R; i++)
#define ffloop(i,L,R) for (int i = L; i > R; i--)
#define ffeloop(i,L,R) for (int i = L; i >= R; i--)
#define forEach(i,t) for (auto i=t.begin(); i!=t.end(); i++)
#define ALL(c) (c).begin(),(c).end()
#define pb push_back
#define dekh(d) cout<<d<<endl
#define dekh2(d) cout<<d<<" "
#define dekh3(d) cout<<d
typedef unsigned long long ull;
typedef long long ll;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<ll> vll;
typedef long double ld;
int dp[501][501];
int solve(vi& v, int i , int j){
    if(i >= j) return 0;
    if(dp[i][j] !=  -1) return dp[i][j];
    int mini = INT_MAX;
    for(int k =  i; k < j ; k++){
        int tempans =  (v[i -1 ]*v[k]*v[j]) + solve(v , i , k ) + solve(v, k + 1, j);
        if(tempans < mini) mini = tempans;
    }
    return dp[i][j] = mini;
}

int main(){
    int t;
    cin>>t;
    while(t--){
        memset(dp , -1, sizeof(dp));
        int n; 
        cin>>n;
        vi v(n);
        floop(i , 0 , n) cin>>v[i];
        cout<<solve(v, 1, n - 1)<<endl;
    }
    
  
}

