#include<iostream>
#include<vector>
#include<string>
#include<cstring>
#include<cmath>
#include<algorithm>
#include<unordered_map>
#include<unordered_set>
#include<set>
#include<map>
#include<sstream>
#include<stack>
#include<queue>
#include<climits>
using namespace std;

#define floop(i,L,R) for (int i = L; i < R; i++)
#define feloop(i,L,R) for (int i = L; i <= R; i++)
#define ffloop(i,L,R) for (int i = L; i > R; i--)
#define ffeloop(i,L,R) for (int i = L; i >= R; i--)
#define forEach(i,t) for (auto i=t.begin(); i!=t.end(); i++)
#define ALL(c) (c).begin(),(c).end()
#define pb push_back
#define dekh(d) cout<<d<<endl
#define dekh2(d) cout<<d<<" "
#define dekh3(d) cout<<d
typedef unsigned long long ull;
typedef long long ll;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<ll> vll;
typedef long double ld;

int solve(vector<ll>& v ,int  n){
    int low= 0 , high = n - 1;
    while(low <= high){
        int mid = (low + high)/2;
        
        if(mid != 0 && v[mid - 1 ] > v[mid]) return mid;

        if(v[mid] == v[high]){ // for handling duplicate cases
            high--;
        }
        else if(v[mid] > v[high]){
             low = mid + 1;
        }
        else{
            high = mid - 1;
        }
    }
    return low;   
}
int main(){
    int t;
    cin>>t;
    while(t--){
        int n ; 
        cin>>n;
        vector<ll> v(n);
        floop(i, 0 , n) cin>>v[i];

        cout<<solve(v, n)<<endl;

    }
}
