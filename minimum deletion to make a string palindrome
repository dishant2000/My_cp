#include<iostream>
#include<vector>
#include<string>
#include<cstring>
#include<cmath>
#include<algorithm>
#include<unordered_map>
#include<unordered_set>
#include<set>
#include<map>
#include<sstream>
#include<stack>
#include<queue>
#include<climits>
using namespace std;

#define floop(i,L,R) for (int i = L; i < R; i++)
#define feloop(i,L,R) for (int i = L; i <= R; i++)
#define ffloop(i,L,R) for (int i = L; i > R; i--)
#define ffeloop(i,L,R) for (int i = L; i >= R; i--)
#define forEach(i,t) for (auto i=t.begin(); i!=t.end(); i++)
#define ALL(c) (c).begin(),(c).end()
#define pb push_back
#define dekh(d) cout<<d<<endl
#define dekh2(d) cout<<d<<" "
#define dekh3(d) cout<<d
typedef unsigned long long ull;
typedef long long ll;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<ll> vll;
typedef long double ld;
int dp[10001][10001];
int solve(string s, string rev){
    floop(i , 1 , s.size() + 1){
        floop(j , 1 , s.size() + 1){
            if(s[i -1 ] == rev[j - 1]){
               dp[i][j] =  1  + dp[i - 1][j -1 ];
            }
            else{
                dp[i][j] = max(dp[i -1][j], dp[i][j -1]);
            }
        }
    }
    return s.size() - dp[s.size()][s.size()];
}
int main(){
    int t;
    cin>>t;
    while(t--){
        string s;
        cin>>s;
        string str = s;
        reverse(s.begin(),s.end());
        cout<<solve(str , s)<<endl;
    }
}

