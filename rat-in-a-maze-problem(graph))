class Solution{
    public:
    int vx[4] = {0,0,1,-1};
    int vy[4] = {1,-1,0,0};
    string dir[4] = {"D","U","R","L"};
    int sum = 0;
    bool vis[10][10];
    bool is_valid(vector<vector<int>> &m, int n,int x,int y){
        if(x < 0 || y < 0 || x >= n || y >= n) return false;
        else if(m[y][x] == 0) return false;
        else return true;
    }
    void solve(vector<vector<int>> &m, int n , vector<string> &res, int x , int y, string currPath){
        if(m[y][x] == 0) return;
        if(x == n - 1 && y == n - 1){
            res.push_back(currPath);
            return;
        }
        if(vis[y][x]) return;
        vis[y][x] = true;
        
        
        
        for(int i = 0 ; i< 4; i++){
            int nx = x + vx[i];
            int ny = y + vy[i];
            string currDir = dir[i];
            // cout<<"cord = "<<nx<<ny<<n<<"\n";
            if(is_valid(m,n,nx,ny)){
                // cout<<"valid cord = "<<nx<<ny<<"\n";
                solve(m,n,res,nx,ny,currPath + currDir);
            }
        }
        vis[y][x] = false;
        
    }
    
    
    vector<string> findPath(vector<vector<int>> &m, int n) {
        // Your code goes here
        memset(vis,false,sizeof(vis));
        vector<string> res;
        solve(m,n,res,0,0,"");
        // cout<<"res = "<<res.size()<<"\n";
        sort(res.begin(),res.end());
        return res;
    }
};
